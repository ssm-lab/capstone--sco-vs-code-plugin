{
  "name": "ecooptimizer",
  "displayName": "EcoOptimizer VS Code Plugin",
  "contributors": [
    "Sevhena Walker",
    "Tanveer Brar",
    "Ayushi Amin",
    "Mya Hussain",
    "Nivetah Kuruparan"
  ],
  "description": "VS Code Plugin for EcoOptimizer Refactoring Tool",
  "version": "0.0.1",
  "engines": {
    "vscode": "^1.92.0"
  },
  "categories": [
    "Other"
  ],
  "activationEvents": [
    "onLanguage:python"
  ],
  "main": "./dist/extension.js",
  "directories": {
    "src": "./src",
    "test": "./test"
  },
  "scripts": {
    "vscode:prepublish": "npm run package",
    "compile": "webpack",
    "test": "jest --verbose",
    "test:watch": "jest --watch --silent --verbose",
    "watch": "webpack --watch",
    "package": "webpack --mode production --devtool hidden-source-map",
    "compile-tests": "tsc -p . --outDir out",
    "watch-tests": "tsc -p . -w --outDir out",
    "lint": "eslint src",
    "prepare": "husky"
  },
  "jest": {
    "preset": "ts-jest",
    "testEnvironment": "node",
    "setupFilesAfterEnv": [
      "./test/setup.ts"
    ],
    "moduleNameMapper": {
      "^vscode$": "<rootDir>/test/mocks/vscode-mock.ts"
    },
    "moduleDirectories": [
      "node_modules",
      "tests/__mocks__"
    ],
    "roots": [
      "<rootDir>/src",
      "<rootDir>/test"
    ],
    "collectCoverage": true,
    "coverageReporters": [
      "text",
      "html",
      "lcov"
    ],
    "coverageDirectory": "<rootDir>/coverage/",
    "coverageThreshold": {
      "global": {
        "statements": 80
      }
    },
    "collectCoverageFrom": [
      "src/**/*.ts",
      "!src/**/*.d.ts",
      "!src/**/index.ts",
      "!test/mocks/*",
      "!src/extension.ts",
      "!src/context/*"
    ]
  },
  "lint-staged": {
    "src/**/*.ts": [
      "eslint --fix",
      "prettier --write"
    ]
  },
  "devDependencies": {
    "@types/jest": "^29.5.14",
    "@types/node": "20.x",
    "@types/vscode": "^1.92.0",
    "@types/ws": "^8.5.14",
    "@typescript-eslint/eslint-plugin": "^8.24.1",
    "@typescript-eslint/parser": "^8.24.1",
    "@vscode/test-cli": "^0.0.10",
    "@vscode/test-electron": "^2.4.1",
    "css-loader": "^7.1.2",
    "eslint": "^9.21.0",
    "eslint-config-prettier": "^10.0.1",
    "eslint-plugin-prettier": "^5.2.3",
    "eslint-plugin-unused-imports": "^4.1.4",
    "husky": "^9.1.7",
    "jest": "^29.7.0",
    "jest-silent-reporter": "^0.6.0",
    "lint-staged": "^15.4.3",
    "prettier": "^3.5.2",
    "prettier-plugin-tailwindcss": "^0.6.11",
    "style-loader": "^4.0.0",
    "ts-jest": "^29.2.6",
    "ts-loader": "^9.5.1",
    "typescript": "^5.7.2",
    "webpack": "^5.95.0",
    "webpack-cli": "^5.1.4",
    "webpack-node-externals": "^3.0.0"
  },
  "dependencies": {
    "@types/dotenv": "^6.1.1",
    "bufferutil": "^4.0.9",
    "dotenv": "^16.4.7",
    "dotenv-webpack": "^8.1.0",
    "utf-8-validate": "^6.0.5",
    "ws": "^8.18.0"
  },
  "contributes": {
    "viewsContainers": {
      "activitybar": [
        {
          "id": "ecooptimizer",
          "title": "Eco Optimizer",
          "icon": "assets/eco-icon.png"
        }
      ]
    },
    "views": {
      "ecooptimizer": [
        {
          "id": "ecooptimizer.view",
          "name": "Code Smells",
          "icon": "assets/eco-icon.png"
        },
        {
          "id": "ecooptimizer.filterView",
          "name": "Filter Smells",
          "icon": "assets/eco-icon.png"
        },
        {
          "id": "ecooptimizer.refactoringDetails",
          "name": "Refactoring Details",
          "icon": "assets/eco-icon.png"
        }
      ]
    },
    "viewsWelcome": [
      {
        "view": "ecooptimizer.view",
        "contents": "No code smells detected yet. Configure your workspace to start analysis.\n\n[Configure Workspace](command:ecooptimizer.configureWorkspace)\n\n[Read the docs](https://code.visualstudio.com/api) to learn how to use Eco-Optimizer.",
        "when": "!workspaceState.workspaceConfigured"
      }
    ],
    "commands": [
      {
        "command": "ecooptimizer.configureWorkspace",
        "title": "Configure Workspace",
        "category": "Eco Optimizer"
      },
      {
        "command": "ecooptimizer.resetConfiguration",
        "title": "Reset Configuration",
        "category": "Eco Optimizer"
      },
      {
        "command": "ecooptimizer.toggleSmellFilter",
        "title": "Toggle Smell",
        "category": "Eco Optimizer"
      },
      {
        "command": "ecooptimizer.editSmellFilterOption",
        "title": "Edit Option",
        "icon": "$(edit)",
        "category": "Eco Optimizer"
      },
      {
        "command": "ecooptimizer.selectAllFilterSmells",
        "title": "Select All Smells",
        "category": "Eco Optimizer"
      },
      {
        "command": "ecooptimizer.deselectAllFilterSmells",
        "title": "Deselect All Smells",
        "category": "Eco Optimizer"
      },
      {
        "command": "ecooptimizer.openFile",
        "title": "Open File",
        "category": "Eco Optimizer"
      },
      {
        "command": "ecooptimizer.detectSmellsFolder",
        "title": "Detect Smells for All Files",
        "icon": "$(search)",
        "category": "Eco Optimizer"
      },
      {
        "command": "ecooptimizer.detectSmellsFile",
        "title": "Detect Smells",
        "icon": "$(search)",
        "category": "Eco Optimizer"
      },
      {
        "command": "ecooptimizer.refactorAllSmellsOfType",
        "title": "Refactor Smells By Type",
        "icon": "$(tools)",
        "category": "Eco Optimizer"
      },
      {
        "command": "ecooptimizer.refactorSmell",
        "title": "Refactor Smell",
        "icon": "$(tools)",
        "category": "Eco Optimizer"
      },
      {
        "command": "ecooptimizer.acceptRefactoring",
        "title": "Accept Refactoring",
        "category": "Eco Optimizer"
      },
      {
        "command": "ecooptimizer.rejectRefactoring",
        "title": "Reject Refactoring",
        "category": "Eco Optimizer"
      },
      {
        "command": "ecooptimizer.jumpToSmell",
        "title": "Jump to Smell in File",
        "category": "Eco Optimizer"
      },
      {
        "command": "ecooptimizer.wipeWorkCache",
        "title": "Clear Smells Cache",
        "category": "Eco Optimizer"
      }
    ],
    "menus": {
      "view/title": [
        {
          "command": "ecooptimizer.resetConfiguration",
          "when": "view == ecooptimizer.view && workspaceState.workspaceConfigured",
          "group": "resource"
        },
        {
          "command": "ecooptimizer.wipeWorkCache",
          "when": "view == ecooptimizer.view && workspaceState.workspaceConfigured",
          "group": "resource"
        },
        {
          "command": "ecooptimizer.selectAllFilterSmells",
          "when": "view == ecooptimizer.filterView",
          "group": "resource"
        },
        {
          "command": "ecooptimizer.deselectAllFilterSmells",
          "when": "view == ecooptimizer.filterView",
          "group": "resource"
        },
        {
          "command": "ecooptimizer.acceptRefactoring",
          "when": "view == ecooptimizer.refactoringDetails",
          "group": "navigation"
        },
        {
          "command": "ecooptimizer.rejectRefactoring",
          "when": "view == ecooptimizer.refactoringDetails",
          "group": "navigation"
        }
      ],
      "view/item/context": [
        {
          "command": "ecooptimizer.editSmellFilterOption",
          "when": "viewItem == smellOption",
          "group": "inline"
        },
        {
          "command": "ecooptimizer.detectSmellsFolder",
          "when": "viewItem == ecoOptimizerFolder",
          "group": "inline"
        },
        {
          "command": "ecooptimizer.detectSmellsFile",
          "when": "viewItem == ecoOptimizerFile || viewItem == ecoOptimizerFile-hasSmells",
          "group": "inline"
        },
        {
          "command": "ecooptimizer.refactorAllSmellsOfType",
          "when": "viewItem == ecoOptimizerFile-hasSmells",
          "group": "inline"
        },
        {
          "command": "ecooptimizer.refactorSmell",
          "when": "viewItem == ecoOptimizerSmell",
          "group": "inline"
        }
      ]
    }
  }
}
